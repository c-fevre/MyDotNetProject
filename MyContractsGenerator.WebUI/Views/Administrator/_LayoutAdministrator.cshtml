@using MyContractsGenerator.Common
@using MyContractsGenerator.WebUI.Models.AdministratorModels
@model MyContractsGenerator.WebUI.Models.AdministratorModels.AdministratorMainModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="contentSideBarSection">
    @if (User.IsInRole(AppConstants.SuperAdminRoleLabel))
    {
        @RenderBody()
    }
</div>

@section LeftMenuSection {
    @Helpers.LeftMenu(
        menuCss: "administratorLeftMenu",
        itemIconCss: x => "glyphicon glyphicon-user",
        items: Model.Administrators,
        itemIsActive: x => Model.EditedAdministrator != null && (x as AdministratorModel).Id == Model.EditedAdministrator.Id,
        itemActionUrl: x => Url.Action("Edit", "Administrator", new { (x as AdministratorModel).Id }),
        itemDisplay:
            @<div>
                <span class="text-uppercase">@( (item as AdministratorModel).LastName)</span>
                <span class="text-capitalize">@( (item as AdministratorModel).FirstName)</span>
            </div>,
        newItemUrl: Url.Action("Create", "Administrator"),
        newItemText: Resources.Administrator_New,
        userCanDeleteItem: (currentUserId, item) => (item as AdministratorModel).IsRemovable,
        deleteTooltipText: Resources.Administrator_Tooltip_RemoveUser
         )
}

@section ScriptSection {

    <script>
        $(document).ready(function() {
            var aspnet = {
                messages: {
                    beforeLeave: @Html.Raw(Json.Encode(Resources.Shared_BeforeLeave_Message)),
                    nonSelectedText: @Html.Raw(Json.Encode(Resources.Organization_MultiSelect_NonSelectedText))
                }
            };

            $("#EditedAdministrator_LinkedOrganization")
                .multiselect({
                    numberDisplayed: 100,
                    selectAllNumber: false,
                    buttonText: function(options, select) {
                        if (options.length === 0) return aspnet.messages.nonSelectedText;
                        else return $.map(options, function(x) { return $(x).text() }).join(", ");
                    },
                    onChange: function(option, checked, select) {
                        IsThisPageHasBeModified = true;
                        
                        // TODO : faire mieux, rustine qui transforme le multiselect en 
                        $('.multiselect-container input:checkbox').each(function() {
                            if ($(this).prop("checked") && option.val() !== $(this).val()) {
                                $(this).click();
                            }
                        });
                    }
                });

            $('.multiselect-container input:checkbox').each(function() {
                $(this).css("display", "none");
                $(this).closest("label").css("padding", "3px 10px 3px 10px");
            });
        });

    </script>

    @RenderSection("PageChangeChecker", false)
}