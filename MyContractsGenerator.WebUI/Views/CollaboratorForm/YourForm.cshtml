@using MyContractsGenerator.Common
@using MyContractsGenerator.Core.Enum
@model MyContractsGenerator.WebUI.Models.CollaboratorFormModels.CollaboratorFormMainModel

@{
    ViewBag.Title = Resources.CollaboratorForm_Step2_Title;
    Layout = "~/Views/CollaboratorForm/_LayoutCollaboratorForm.cshtml";
}

@using (Html.BeginForm("CheckForm", "CollaboratorForm", FormMethod.Post, new { id = "check-form" }))
{

    @Html.HiddenFor(m => m.c)
    @Html.HiddenFor(m => m.fa)

    @Html.HiddenFor(q => q.Form.Id)
    @Html.HiddenFor(q => q.Password)

    <div class="row">
        <div class="col-md-12 mb50">
            <div class="col-md-6 col-md-offset-3">
                <div class="center">
                    <img src='@Url.Content("~/Content/images/MCG_logo.jpg")' class="login-logo" />
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2">
        </div>
        <div class="col-md-8">
            <div class="form-group">
                <div class="form-group">
                    <h2>@Html.DisplayTextFor(m => m.Form.Label)</h2>
                    <h2>@Model.Form.Role.Label</h2>
                </div>

                <div class="form-group">
                    @Html.ValidationSummary()
                </div>

                @{
                    int count = 1;
                }

                @foreach (var question in Model.Form.Questions.ToList())
                {
                    if (count == 1)
                    {
                        @Html.Raw("<div class=\"form-group row\">");
                    }

                    @Html.Raw("<div class=\"col-md-6\">");


                    @Html.Label(question.Label);

                    switch (question.Type)
                    {
                        case QuestionType.QuestionTypeEnum.Text:
                            @Html.TextBox($"{AppConstants.QuestionIdPrefix}{question.Id}", question.Value, new { @class="form-control small-medium-input text-box single-line valid"})
                            ;
                            break;
                        case QuestionType.QuestionTypeEnum.Boolean:
                            @Html.CheckBox($"{AppConstants.QuestionIdPrefix}{question.Id}", false, new { @class = "form-control small-medium-input text-box single-line valid" });
                            break;
                        case QuestionType.QuestionTypeEnum.Numeric:
                            @Html.TextBox($"{AppConstants.QuestionIdPrefix}{question.Id}", question.Value, new { type = "number", @class = "form-control small-medium-input text-box single-line valid" });
                            break;
                        case QuestionType.QuestionTypeEnum.Datetime:
                            @Html.TextBox($"{AppConstants.QuestionIdPrefix}{question.Id}", question.Value, new { type = "date", @class = "form-control small-medium-input text-box single-line valid" });
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }

                    @Html.Raw("</div>");

                    if (count % 2 == 0)
                    {
                        @Html.Raw("</div>")
                    }
                    if (count % 2 == 0 && count < Model.Form.Questions.Count)
                    {
                        @Html.Raw("<div class=\"form-group row\">")
                    }
                    count++;
                }

                <div class="form-group row">
                    <div class="col-md-12">
                        <input id="login" type="submit" value="@Resources.Form_SendForm" class="btn btn-info" style="float:right;" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
        </div>
    </div>
                    }
